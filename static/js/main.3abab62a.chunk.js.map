{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","input","setInput","map","item","index","value","onClick","button","console","log","newArr","push","addHandler","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAwCeA,EArCH,WAEV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAwBA,OACE,gCACE,4CAxBY,CACd,IAAK,IAAK,IAAK,IACf,IAAK,IAAK,IAAK,IACf,IAAK,IAAK,IAAK,IACf,IAAK,IAAK,IAAK,KAqBNC,KAAK,SAACC,EAAMC,GACnB,OACA,wBAAoBC,MAAOF,EAAMG,QAAS,kBApB3B,SAACC,GACtBC,QAAQC,IAAIF,GACZ,IAAIG,EAAM,YAAOV,GACjBU,EAAOC,KAAKX,GACZQ,QAAQC,IAAIC,GACZT,EAASS,GAe2CE,CAAWT,IAAzD,SAAkEA,GAArDC,UCtBJS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3abab62a.chunk.js","sourcesContent":["import { useState } from 'react'\nimport { create, all } from 'mathjs'\n\nconst App = ()=>{\n  // collection of tasks, need an array.\n  const [input, setInput] = useState(\"\")\n\n  const buttons = [\n    \"7\", \"8\", \"9\", \"C\",\n    \"4\", \"5\", \"6\", \"/\",\n    \"1\", \"2\", \"3\", \"-\",\n    \"0\", \"+\", \"*\", \"=\"\n  ]\n\n  const addHandler = (button) =>{\nconsole.log(button)\nlet newArr = [...input]\nnewArr.push(input)\nconsole.log(newArr)\nsetInput(newArr)\n// math.evaluate(newArr)\n}\n//concat untilclick equals which will then evaluate (add). Then the c will clear string.\n// IF user todenst lcick on c or equals then it adds to input.\n\n\n  \n  // math.evaluate('12 /')\n\n  return (\n    <div>\n      <h1>Calculator</h1>\n    {buttons.map ((item, index)=>{\n      return (\n      <button key={index} value={item} onClick={()=>addHandler(item)} >{item}</button>\n    )}) }\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}